@model IEnumerable<TestVueWebApp.Repository.Models.Remain>

@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1>Remain</h1>

<style>
    th {
        cursor: pointer;
    }
</style>

<p>
    <a asp-action="Create">Create New</a>
</p>

<select id="IdCombobox">
    <option>Remmonth</option>
    <option>Remyear</option>
    <option>Remainsum</option>
    <option>AccountCdNavigation</option>
    <option>ServiceCdNavigation</option>
</select>

<input type="text" id="Input" onkeyup="Search()" placeholder="Search" />

<table id="table-id" class="table">
    <thead>
        <tr>
            <th data-type="int">
                @Html.DisplayNameFor(model => model.Remmonth)
            </th>
            <th data-type="int">
                @Html.DisplayNameFor(model => model.Remyear)
            </th>
            <th data-type="double">
                @Html.DisplayNameFor(model => model.Remainsum)
            </th>
            <th data-type="int">
                @Html.DisplayNameFor(model => model.AccountCdNavigation)
            </th>
            <th data-type="string">
                @Html.DisplayNameFor(model => model.ServiceCdNavigation)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Remmonth)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Remyear)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Remainsum)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.AccountCdNavigation.AccountCd)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.ServiceCdNavigation.ServiceName)
                </td>
                <td>
                    <a asp-action="Edit" asp-route-id="@item.RemainCd">Edit</a> |
                    <a asp-action="Details" asp-route-id="@item.RemainCd">Details</a> |
                    <a asp-action="Delete" asp-route-id="@item.RemainCd">Delete</a>
                </td>
            </tr>
        }
    </tbody>
</table>


<script>
    var selectElem = document.getElementById('IdCombobox')
    var index = 0

    selectElem.addEventListener('change', function () {
        index = selectElem.selectedIndex;
    })

    function Search() {
        var input, filter, table, tr, td, i, txtValue;
        input = document.getElementById("Input");
        filter = input.value.toUpperCase();
        table = document.getElementById("table-id");
        tr = table.getElementsByTagName("tr");

        for (i = 0; i < tr.length; i++) {
            td = tr[i].getElementsByTagName("td")[index];
            if (td) {
                txtValue = td.textContent || td.innerText;
                if (txtValue.toUpperCase().indexOf(filter) > -1) {
                    tr[i].style.display = "";
                }
                else {
                    tr[i].style.display = "none";
                }
            }
        }
    }
</script>

<script>
    const table = document.querySelector('table');
    let colIndex = -1;

    const sortTable = function (index, type, isSorted) {
        const tbody = table.querySelector('tbody');

        const compare = function (row1, row2) {
            var rowData1 = row1.cells[index].innerHTML;
            var rowData2 = row2.cells[index].innerHTML;

            switch (type) {
                case 'int':
                    return rowData1 - rowData2;
                    break;
                case 'double': {
                    rowData1 = rowData1.replace(',', '.');
                    rowData2 = rowData2.replace(',', '.');
                    parseFloat(rowData1);
                    parseFloat(rowData2);
                    return rowData1 - rowData2;
                }
                    break;
                case 'date': {
                    rowData1 = rowData1.split('.').reverse();
                    rowData2 = rowData2.split('.').reverse();
                    return new Date(rowData1).getTime() - new Date(rowData2).getTime();
                }
                    break;
                case 'string':
                    if (rowData1 < rowData2) return -1;
                    else if (rowData1 > rowData2) return 1;
                    return 0;
                    break;
            }
        }
        let rows = [].slice.call(tbody.rows);

        rows.sort(compare);

        if (isSorted) {
            rows.reverse();
        }

        table.removeChild(tbody);

        for (let i = 0; i < rows.length; i++) {
            tbody.appendChild(rows[i]);
        }
        table.appendChild(tbody);
    }

    table.addEventListener('click', (e) => {
        const el = e.target;
        if (el.nodeName != 'TH')
            return;

        const index = el.cellIndex;
        const type = el.getAttribute('data-type')

        sortTable(index, type, colIndex == index);

        if (colIndex == index) {
            colIndex = -1;
        }
        else
            colIndex = index;
    });

</script>