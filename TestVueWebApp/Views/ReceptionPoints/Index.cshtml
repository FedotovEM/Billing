@model IEnumerable<TestVueWebApp.Repository.Models.ReceptionPoint>
@using Newtonsoft.Json
@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
    th {
        cursor: pointer;
    }
</style>

<div id="app">
    <reception-index-component create-reception-url="@Url.Action("Create")" delete-reception-url="@Url.Action("Delete")"
                               edit-reception-url="@Url.Action("Edit")" details-reception-url="@Url.Action("Details")" :receptions="@JsonConvert.SerializeObject(Model)"></reception-index-component>
</div>

@section Scripts{
    <script src="@Url.Content("~/bundle/ReceptionPoints.js")"></script>

    <script>
        const table = document.querySelector('table');
        let colIndex = -1;

        const sortTable = function (index, type, isSorted) {
            const tbody = table.querySelector('tbody');

            const compare = function (row1, row2) {
                var rowData1 = row1.cells[index].innerHTML;
                var rowData2 = row2.cells[index].innerHTML;

                switch (type) {
                    case 'int':
                        return rowData1 - rowData2;
                        break;
                    case 'double': {
                        rowData1 = rowData1.replace(',', '.');
                        rowData2 = rowData2.replace(',', '.');
                        parseFloat(rowData1);
                        parseFloat(rowData2);
                        return rowData1 - rowData2;
                    }
                        break;
                    case 'date': {
                        rowData1 = rowData1.split('.').reverse();
                        rowData2 = rowData2.split('.').reverse();
                        return new Date(rowData1).getTime() - new Date(rowData2).getTime();
                    }
                        break;
                    case 'string':
                        if (rowData1 < rowData2) return -1;
                        else if (rowData1 > rowData2) return 1;
                        return 0;
                        break;
                }
            }
            let rows = [].slice.call(tbody.rows);

            rows.sort(compare);

            if (isSorted) {
                rows.reverse();
            }

            table.removeChild(tbody);

            for (let i = 0; i < rows.length; i++) {
                tbody.appendChild(rows[i]);
            }
            table.appendChild(tbody);
        }

        table.addEventListener('click', (e) => {
            const el = e.target;
            if (el.nodeName != 'TH')
                return;

            const index = el.cellIndex;
            const type = el.getAttribute('data-type')

            sortTable(index, type, colIndex == index);

            if (colIndex == index) {
                colIndex = -1;
            }
            else
                colIndex = index;
        });

    </script>

    <script>
        var selectElem = document.getElementById('IdCombobox')
        var index = 0

        selectElem.addEventListener('change', function () {
            index = selectElem.selectedIndex;
        })

        function Search() {
            var input, filter, table, tr, td, i, txtValue;
            input = document.getElementById("Input");
            filter = input.value.toUpperCase();
            table = document.getElementById("table-id");
            tr = table.getElementsByTagName("tr");

            for (i = 0; i < tr.length; i++) {
                td = tr[i].getElementsByTagName("td")[index];
                if (td) {
                    txtValue = td.textContent || td.innerText;
                    if (txtValue.toUpperCase().indexOf(filter) > -1) {
                        tr[i].style.display = "";
                    }
                    else {
                        tr[i].style.display = "none";
                    }
                }
            }
        }
    </script>

}
