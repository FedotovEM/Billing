// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestVueWebApp.Repository;

namespace TestVueWebApp.Migrations
{
    [DbContext(typeof(BillingDbContext))]
    partial class BillingDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "Cyrillic_General_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TestVueWebApp.Repository.Models.Abonent", b =>
                {
                    b.Property<string>("AccountCd")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("AccountCD");

                    b.Property<int?>("CountPerson")
                        .HasColumnType("int");

                    b.Property<string>("District")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Fio")
                        .IsRequired()
                        .HasMaxLength(70)
                        .IsUnicode(false)
                        .HasColumnType("varchar(70)")
                        .HasColumnName("FIO");

                    b.Property<short?>("FlatNo")
                        .HasColumnType("smallint");

                    b.Property<short>("HouseNo")
                        .HasColumnType("smallint");

                    b.Property<string>("Phone")
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("varchar(16)");

                    b.Property<double?>("SizeFlat")
                        .HasColumnType("float");

                    b.Property<int>("StreetCd")
                        .HasColumnType("int")
                        .HasColumnName("StreetCD");

                    b.Property<int?>("Сorpus")
                        .HasColumnType("int");

                    b.HasKey("AccountCd");

                    b.HasIndex("StreetCd");

                    b.ToTable("Abonent");
                });

            modelBuilder.Entity("TestVueWebApp.Repository.Models.AbonentMode", b =>
                {
                    b.Property<int>("AbonentModeСd")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AbonentModeСD")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountCd")
                        .IsRequired()
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("AccountCD");

                    b.Property<bool>("Counterr")
                        .HasColumnType("bit");

                    b.Property<int>("ModeCd")
                        .HasColumnType("int")
                        .HasColumnName("ModeCD");

                    b.HasKey("AbonentModeСd");

                    b.HasIndex("AccountCd");

                    b.HasIndex("ModeCd");

                    b.ToTable("AbonentMode");
                });

            modelBuilder.Entity("TestVueWebApp.Repository.Models.Disrepair", b =>
                {
                    b.Property<int>("FailureCd")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FailureCD")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FailureName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("FailureCd");

                    b.ToTable("Disrepair");
                });

            modelBuilder.Entity("TestVueWebApp.Repository.Models.Executor", b =>
                {
                    b.Property<int>("ExecutorCd")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ExecutorCD")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Fio")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("FIO");

                    b.HasKey("ExecutorCd");

                    b.ToTable("Executor");
                });

            modelBuilder.Entity("TestVueWebApp.Repository.Models.Mode", b =>
                {
                    b.Property<int>("ModeCd")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ModeCD")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ModeName")
                        .IsRequired()
                        .HasMaxLength(230)
                        .IsUnicode(false)
                        .HasColumnType("varchar(230)");

                    b.Property<decimal>("Norma")
                        .HasColumnType("numeric(15,4)");

                    b.Property<int>("ServiceCd")
                        .HasColumnType("int")
                        .HasColumnName("ServiceCD");

                    b.HasKey("ModeCd");

                    b.HasIndex("ServiceCd");

                    b.ToTable("Mode");
                });

            modelBuilder.Entity("TestVueWebApp.Repository.Models.NachislSumma", b =>
                {
                    b.Property<int>("NachislFactCd")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("NachislFactCD")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AbonentModeСd")
                        .HasColumnType("int")
                        .HasColumnName("AbonentModeСD");

                    b.Property<decimal>("CountResources")
                        .HasColumnType("numeric(15,2)");

                    b.Property<string>("NachType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<short>("NachislMonth")
                        .HasColumnType("smallint");

                    b.Property<decimal>("NachislSum")
                        .HasColumnType("numeric(15,2)");

                    b.Property<short>("NachislYear")
                        .HasColumnType("smallint");

                    b.HasKey("NachislFactCd");

                    b.HasIndex("AbonentModeСd");

                    b.ToTable("NachislSumma");
                });

            modelBuilder.Entity("TestVueWebApp.Repository.Models.PaySumma", b =>
                {
                    b.Property<int>("PayFactCd")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PayFactCD")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AbonentModeСd")
                        .HasColumnType("int")
                        .HasColumnName("AbonentModeСD");

                    b.Property<DateTime>("PayDate")
                        .HasColumnType("date");

                    b.Property<short>("PayMonth")
                        .HasColumnType("smallint");

                    b.Property<decimal>("PaySum")
                        .HasColumnType("numeric(15,2)");

                    b.Property<string>("PayType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<short>("PayYear")
                        .HasColumnType("smallint");

                    b.Property<int>("ReceptionPointCd")
                        .HasColumnType("int")
                        .HasColumnName("ReceptionPointCD");

                    b.HasKey("PayFactCd");

                    b.HasIndex("AbonentModeСd");

                    b.HasIndex("ReceptionPointCd");

                    b.ToTable("PaySumma");
                });

            modelBuilder.Entity("TestVueWebApp.Repository.Models.Price", b =>
                {
                    b.Property<int>("PriceCd")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PriceCD")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ModeCd")
                        .HasColumnType("int")
                        .HasColumnName("ModeCD");

                    b.Property<decimal>("PriceValue")
                        .HasColumnType("numeric(15,2)");

                    b.HasKey("PriceCd");

                    b.HasIndex("ModeCd");

                    b.ToTable("Price");
                });

            modelBuilder.Entity("TestVueWebApp.Repository.Models.ReceptionPoint", b =>
                {
                    b.Property<int>("ReceptionPointCd")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ReceptionPointCD")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ReceptionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ReceptionPointCd");

                    b.ToTable("ReceptionPoint");
                });

            modelBuilder.Entity("TestVueWebApp.Repository.Models.Remain", b =>
                {
                    b.Property<int>("RemainCd")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RemainCD")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountCd")
                        .IsRequired()
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("AccountCD");

                    b.Property<decimal?>("Remainsum")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(15,2)")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("Remmonth")
                        .HasColumnType("smallint");

                    b.Property<short>("Remyear")
                        .HasColumnType("smallint");

                    b.Property<int>("ServiceCd")
                        .HasColumnType("int")
                        .HasColumnName("ServiceCD");

                    b.HasKey("RemainCd");

                    b.HasIndex("AccountCd");

                    b.HasIndex("ServiceCd");

                    b.ToTable("Remains");
                });

            modelBuilder.Entity("TestVueWebApp.Repository.Models.Request", b =>
                {
                    b.Property<int>("RequestCd")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RequestCD")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountCd")
                        .IsRequired()
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("AccountCD");

                    b.Property<bool?>("Executed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ExecutionDate")
                        .HasColumnType("date");

                    b.Property<int>("ExecutorCd")
                        .HasColumnType("int")
                        .HasColumnName("ExecutorCD");

                    b.Property<int>("FailureCd")
                        .HasColumnType("int")
                        .HasColumnName("FailureCD");

                    b.Property<DateTime>("IncomingDate")
                        .HasColumnType("date");

                    b.HasKey("RequestCd");

                    b.HasIndex("AccountCd");

                    b.HasIndex("ExecutorCd");

                    b.HasIndex("FailureCd");

                    b.ToTable("Request");
                });

            modelBuilder.Entity("TestVueWebApp.Repository.Models.Service", b =>
                {
                    b.Property<int>("ServiceCd")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ServiceCD")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("UnitsCd")
                        .HasColumnType("int")
                        .HasColumnName("UnitsCD");

                    b.HasKey("ServiceCd");

                    b.HasIndex("UnitsCd");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("TestVueWebApp.Repository.Models.Street", b =>
                {
                    b.Property<int>("StreetCd")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StreetCD")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("StreetCd");

                    b.ToTable("Street");
                });

            modelBuilder.Entity("TestVueWebApp.Repository.Models.Unit", b =>
                {
                    b.Property<int>("UnitCd")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UnitCD")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("UnitsName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.HasKey("UnitCd");

                    b.ToTable("Unit");
                });

            modelBuilder.Entity("TestVueWebApp.Repository.Models.Abonent", b =>
                {
                    b.HasOne("TestVueWebApp.Repository.Models.Street", "StreetCdNavigation")
                        .WithMany("Abonents")
                        .HasForeignKey("StreetCd")
                        .HasConstraintName("FK_Abonent_Street")
                        .IsRequired();

                    b.Navigation("StreetCdNavigation");
                });

            modelBuilder.Entity("TestVueWebApp.Repository.Models.AbonentMode", b =>
                {
                    b.HasOne("TestVueWebApp.Repository.Models.Abonent", "AccountCdNavigation")
                        .WithMany("AbonentModes")
                        .HasForeignKey("AccountCd")
                        .HasConstraintName("FK_AbonentMode_Abonent")
                        .IsRequired();

                    b.HasOne("TestVueWebApp.Repository.Models.Mode", "ModeCdNavigation")
                        .WithMany("AbonentModes")
                        .HasForeignKey("ModeCd")
                        .HasConstraintName("FK_AbonentMode_Mode")
                        .IsRequired();

                    b.Navigation("AccountCdNavigation");

                    b.Navigation("ModeCdNavigation");
                });

            modelBuilder.Entity("TestVueWebApp.Repository.Models.Mode", b =>
                {
                    b.HasOne("TestVueWebApp.Repository.Models.Service", "ServiceCdNavigation")
                        .WithMany("Modes")
                        .HasForeignKey("ServiceCd")
                        .HasConstraintName("FK_Mode_Services")
                        .IsRequired();

                    b.Navigation("ServiceCdNavigation");
                });

            modelBuilder.Entity("TestVueWebApp.Repository.Models.NachislSumma", b =>
                {
                    b.HasOne("TestVueWebApp.Repository.Models.AbonentMode", "AbonentModeСdNavigation")
                        .WithMany("NachislSummas")
                        .HasForeignKey("AbonentModeСd")
                        .HasConstraintName("FK_NachislSumma_AbonMode")
                        .IsRequired();

                    b.Navigation("AbonentModeСdNavigation");
                });

            modelBuilder.Entity("TestVueWebApp.Repository.Models.PaySumma", b =>
                {
                    b.HasOne("TestVueWebApp.Repository.Models.AbonentMode", "AbonentModeСdNavigation")
                        .WithMany("PaySummas")
                        .HasForeignKey("AbonentModeСd")
                        .HasConstraintName("FK_PaySumma_AbonMode")
                        .IsRequired();

                    b.HasOne("TestVueWebApp.Repository.Models.ReceptionPoint", "ReceptionPointCdNavigation")
                        .WithMany("PaySummas")
                        .HasForeignKey("ReceptionPointCd")
                        .HasConstraintName("FK_PaySumma_ReceptionPoint")
                        .IsRequired();

                    b.Navigation("AbonentModeСdNavigation");

                    b.Navigation("ReceptionPointCdNavigation");
                });

            modelBuilder.Entity("TestVueWebApp.Repository.Models.Price", b =>
                {
                    b.HasOne("TestVueWebApp.Repository.Models.Mode", "ModeCdNavigation")
                        .WithMany("Prices")
                        .HasForeignKey("ModeCd")
                        .HasConstraintName("FK_Price_Servicess")
                        .IsRequired();

                    b.Navigation("ModeCdNavigation");
                });

            modelBuilder.Entity("TestVueWebApp.Repository.Models.Remain", b =>
                {
                    b.HasOne("TestVueWebApp.Repository.Models.Abonent", "AccountCdNavigation")
                        .WithMany("Remains")
                        .HasForeignKey("AccountCd")
                        .HasConstraintName("FK_Remains_Abonent")
                        .IsRequired();

                    b.HasOne("TestVueWebApp.Repository.Models.Service", "ServiceCdNavigation")
                        .WithMany("Remains")
                        .HasForeignKey("ServiceCd")
                        .HasConstraintName("FK_Remains_Servicess")
                        .IsRequired();

                    b.Navigation("AccountCdNavigation");

                    b.Navigation("ServiceCdNavigation");
                });

            modelBuilder.Entity("TestVueWebApp.Repository.Models.Request", b =>
                {
                    b.HasOne("TestVueWebApp.Repository.Models.Abonent", "AccountCdNavigation")
                        .WithMany("Requests")
                        .HasForeignKey("AccountCd")
                        .HasConstraintName("FK_Request_Abonent")
                        .IsRequired();

                    b.HasOne("TestVueWebApp.Repository.Models.Executor", "ExecutorCdNavigation")
                        .WithMany("Requests")
                        .HasForeignKey("ExecutorCd")
                        .HasConstraintName("FK_Request_Executor")
                        .IsRequired();

                    b.HasOne("TestVueWebApp.Repository.Models.Disrepair", "FailureCdNavigation")
                        .WithMany("Requests")
                        .HasForeignKey("FailureCd")
                        .HasConstraintName("FK_Request_Disrepair")
                        .IsRequired();

                    b.Navigation("AccountCdNavigation");

                    b.Navigation("ExecutorCdNavigation");

                    b.Navigation("FailureCdNavigation");
                });

            modelBuilder.Entity("TestVueWebApp.Repository.Models.Service", b =>
                {
                    b.HasOne("TestVueWebApp.Repository.Models.Unit", "UnitsCdNavigation")
                        .WithMany("Services")
                        .HasForeignKey("UnitsCd")
                        .HasConstraintName("FK_Services_Unit")
                        .IsRequired();

                    b.Navigation("UnitsCdNavigation");
                });

            modelBuilder.Entity("TestVueWebApp.Repository.Models.Abonent", b =>
                {
                    b.Navigation("AbonentModes");

                    b.Navigation("Remains");

                    b.Navigation("Requests");
                });

            modelBuilder.Entity("TestVueWebApp.Repository.Models.AbonentMode", b =>
                {
                    b.Navigation("NachislSummas");

                    b.Navigation("PaySummas");
                });

            modelBuilder.Entity("TestVueWebApp.Repository.Models.Disrepair", b =>
                {
                    b.Navigation("Requests");
                });

            modelBuilder.Entity("TestVueWebApp.Repository.Models.Executor", b =>
                {
                    b.Navigation("Requests");
                });

            modelBuilder.Entity("TestVueWebApp.Repository.Models.Mode", b =>
                {
                    b.Navigation("AbonentModes");

                    b.Navigation("Prices");
                });

            modelBuilder.Entity("TestVueWebApp.Repository.Models.ReceptionPoint", b =>
                {
                    b.Navigation("PaySummas");
                });

            modelBuilder.Entity("TestVueWebApp.Repository.Models.Service", b =>
                {
                    b.Navigation("Modes");

                    b.Navigation("Remains");
                });

            modelBuilder.Entity("TestVueWebApp.Repository.Models.Street", b =>
                {
                    b.Navigation("Abonents");
                });

            modelBuilder.Entity("TestVueWebApp.Repository.Models.Unit", b =>
                {
                    b.Navigation("Services");
                });
#pragma warning restore 612, 618
        }
    }
}
